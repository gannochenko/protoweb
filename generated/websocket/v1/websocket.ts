/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: websocket/v1/websocket.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../payload/client/v1/client";
import * as dependency_3 from "./../payload/server/v1/server";
import * as pb_1 from "google-protobuf";
export namespace faceblur.websocket.v1 {
    export enum ServerMessageType {
        SERVER_MESSAGE_TYPE_UNSPECIFIED = 0,
        SERVER_MESSAGE_TYPE_IMAGE_LIST = 1
    }
    export enum ClientMessageType {
        CLIENT_MESSAGE_TYPE_UNSPECIFIED = 0,
        CLIENT_MESSAGE_TYPE_TOKEN_UPDATE = 1
    }
    export class ServerMessage extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            timestamp?: dependency_1.google.protobuf.Timestamp;
            type?: ServerMessageType;
            payload_version?: string;
        } & (({
            image_list?: dependency_3.faceblur.websocket.payload.server.v1.ImageList;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("payload_version" in data && data.payload_version != undefined) {
                    this.payload_version = data.payload_version;
                }
                if ("image_list" in data && data.image_list != undefined) {
                    this.image_list = data.image_list;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, ServerMessageType.SERVER_MESSAGE_TYPE_UNSPECIFIED) as ServerMessageType;
        }
        set type(value: ServerMessageType) {
            pb_1.Message.setField(this, 2, value);
        }
        get payload_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set payload_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get image_list() {
            return pb_1.Message.getWrapperField(this, dependency_3.faceblur.websocket.payload.server.v1.ImageList, 4) as dependency_3.faceblur.websocket.payload.server.v1.ImageList;
        }
        set image_list(value: dependency_3.faceblur.websocket.payload.server.v1.ImageList) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_image_list() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "image_list";
            } = {
                0: "none",
                4: "image_list"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            type?: ServerMessageType;
            payload_version?: string;
            image_list?: ReturnType<typeof dependency_3.faceblur.websocket.payload.server.v1.ImageList.prototype.toObject>;
        }): ServerMessage {
            const message = new ServerMessage({});
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.payload_version != null) {
                message.payload_version = data.payload_version;
            }
            if (data.image_list != null) {
                message.image_list = dependency_3.faceblur.websocket.payload.server.v1.ImageList.fromObject(data.image_list);
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                type?: ServerMessageType;
                payload_version?: string;
                image_list?: ReturnType<typeof dependency_3.faceblur.websocket.payload.server.v1.ImageList.prototype.toObject>;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.payload_version != null) {
                data.payload_version = this.payload_version;
            }
            if (this.image_list != null) {
                data.image_list = this.image_list.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timestamp)
                writer.writeMessage(1, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.type != ServerMessageType.SERVER_MESSAGE_TYPE_UNSPECIFIED)
                writer.writeEnum(2, this.type);
            if (this.payload_version.length)
                writer.writeString(3, this.payload_version);
            if (this.has_image_list)
                writer.writeMessage(4, this.image_list, () => this.image_list.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.payload_version = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.image_list, () => message.image_list = dependency_3.faceblur.websocket.payload.server.v1.ImageList.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerMessage {
            return ServerMessage.deserialize(bytes);
        }
    }
    export class ClientMessage extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            timestamp?: dependency_1.google.protobuf.Timestamp;
            type?: ClientMessageType;
            payload_version?: string;
        } & (({
            token_update?: dependency_2.faceblur.websocket.payload.client.v1.TokenUpdate;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("payload_version" in data && data.payload_version != undefined) {
                    this.payload_version = data.payload_version;
                }
                if ("token_update" in data && data.token_update != undefined) {
                    this.token_update = data.token_update;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, ClientMessageType.CLIENT_MESSAGE_TYPE_UNSPECIFIED) as ClientMessageType;
        }
        set type(value: ClientMessageType) {
            pb_1.Message.setField(this, 2, value);
        }
        get payload_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set payload_version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get token_update() {
            return pb_1.Message.getWrapperField(this, dependency_2.faceblur.websocket.payload.client.v1.TokenUpdate, 4) as dependency_2.faceblur.websocket.payload.client.v1.TokenUpdate;
        }
        set token_update(value: dependency_2.faceblur.websocket.payload.client.v1.TokenUpdate) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_token_update() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "token_update";
            } = {
                0: "none",
                4: "token_update"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            type?: ClientMessageType;
            payload_version?: string;
            token_update?: ReturnType<typeof dependency_2.faceblur.websocket.payload.client.v1.TokenUpdate.prototype.toObject>;
        }): ClientMessage {
            const message = new ClientMessage({});
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.payload_version != null) {
                message.payload_version = data.payload_version;
            }
            if (data.token_update != null) {
                message.token_update = dependency_2.faceblur.websocket.payload.client.v1.TokenUpdate.fromObject(data.token_update);
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                type?: ClientMessageType;
                payload_version?: string;
                token_update?: ReturnType<typeof dependency_2.faceblur.websocket.payload.client.v1.TokenUpdate.prototype.toObject>;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.payload_version != null) {
                data.payload_version = this.payload_version;
            }
            if (this.token_update != null) {
                data.token_update = this.token_update.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timestamp)
                writer.writeMessage(1, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.type != ClientMessageType.CLIENT_MESSAGE_TYPE_UNSPECIFIED)
                writer.writeEnum(2, this.type);
            if (this.payload_version.length)
                writer.writeString(3, this.payload_version);
            if (this.has_token_update)
                writer.writeMessage(4, this.token_update, () => this.token_update.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.payload_version = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.token_update, () => message.token_update = dependency_2.faceblur.websocket.payload.client.v1.TokenUpdate.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientMessage {
            return ClientMessage.deserialize(bytes);
        }
    }
}
