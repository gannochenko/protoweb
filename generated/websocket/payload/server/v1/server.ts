/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: websocket/payload/server/v1/server.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../../common/image/v1/image";
import * as pb_1 from "google-protobuf";
export namespace faceblur.websocket.payload.server.v1 {
    export class ImageList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            images?: dependency_1.faceblur.common.image.v1.Image[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("images" in data && data.images != undefined) {
                    this.images = data.images;
                }
            }
        }
        get images() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.faceblur.common.image.v1.Image, 1) as dependency_1.faceblur.common.image.v1.Image[];
        }
        set images(value: dependency_1.faceblur.common.image.v1.Image[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            images?: ReturnType<typeof dependency_1.faceblur.common.image.v1.Image.prototype.toObject>[];
        }): ImageList {
            const message = new ImageList({});
            if (data.images != null) {
                message.images = data.images.map(item => dependency_1.faceblur.common.image.v1.Image.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                images?: ReturnType<typeof dependency_1.faceblur.common.image.v1.Image.prototype.toObject>[];
            } = {};
            if (this.images != null) {
                data.images = this.images.map((item: dependency_1.faceblur.common.image.v1.Image) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.images.length)
                writer.writeRepeatedMessage(1, this.images, (item: dependency_1.faceblur.common.image.v1.Image) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.images, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.faceblur.common.image.v1.Image.deserialize(reader), dependency_1.faceblur.common.image.v1.Image));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageList {
            return ImageList.deserialize(bytes);
        }
    }
}
