/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: image/v1/image.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/api/annotations/annotations";
import * as dependency_2 from "./../../common/image/v1/image";
import * as dependency_3 from "./../../common/page_navigation/v1/page_navigation";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace faceblur.image.v1 {
    export class GetUploadURLRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetUploadURLRequest {
            const message = new GetUploadURLRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUploadURLRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUploadURLRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUploadURLRequest {
            return GetUploadURLRequest.deserialize(bytes);
        }
    }
    export class GetUploadURLResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: string;
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            version?: string;
            url?: string;
        }): GetUploadURLResponse {
            const message = new GetUploadURLResponse({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                version?: string;
                url?: string;
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version.length)
                writer.writeString(1, this.version);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUploadURLResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUploadURLResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUploadURLResponse {
            return GetUploadURLResponse.deserialize(bytes);
        }
    }
    export class SubmitImageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            image?: dependency_2.faceblur.common.image.v1.CreateImage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
            }
        }
        get image() {
            return pb_1.Message.getWrapperField(this, dependency_2.faceblur.common.image.v1.CreateImage, 1) as dependency_2.faceblur.common.image.v1.CreateImage;
        }
        set image(value: dependency_2.faceblur.common.image.v1.CreateImage) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            image?: ReturnType<typeof dependency_2.faceblur.common.image.v1.CreateImage.prototype.toObject>;
        }): SubmitImageRequest {
            const message = new SubmitImageRequest({});
            if (data.image != null) {
                message.image = dependency_2.faceblur.common.image.v1.CreateImage.fromObject(data.image);
            }
            return message;
        }
        toObject() {
            const data: {
                image?: ReturnType<typeof dependency_2.faceblur.common.image.v1.CreateImage.prototype.toObject>;
            } = {};
            if (this.image != null) {
                data.image = this.image.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_image)
                writer.writeMessage(1, this.image, () => this.image.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitImageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitImageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.image, () => message.image = dependency_2.faceblur.common.image.v1.CreateImage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubmitImageRequest {
            return SubmitImageRequest.deserialize(bytes);
        }
    }
    export class SubmitImageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            version?: string;
        }): SubmitImageResponse {
            const message = new SubmitImageResponse({});
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data: {
                version?: string;
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version.length)
                writer.writeString(1, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitImageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitImageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubmitImageResponse {
            return SubmitImageResponse.deserialize(bytes);
        }
    }
    export class ListImagesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_navigation?: dependency_3.faceblur.common.page_navigation.v1.PageNavigationRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_navigation" in data && data.page_navigation != undefined) {
                    this.page_navigation = data.page_navigation;
                }
            }
        }
        get page_navigation() {
            return pb_1.Message.getWrapperField(this, dependency_3.faceblur.common.page_navigation.v1.PageNavigationRequest, 1) as dependency_3.faceblur.common.page_navigation.v1.PageNavigationRequest;
        }
        set page_navigation(value: dependency_3.faceblur.common.page_navigation.v1.PageNavigationRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_page_navigation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            page_navigation?: ReturnType<typeof dependency_3.faceblur.common.page_navigation.v1.PageNavigationRequest.prototype.toObject>;
        }): ListImagesRequest {
            const message = new ListImagesRequest({});
            if (data.page_navigation != null) {
                message.page_navigation = dependency_3.faceblur.common.page_navigation.v1.PageNavigationRequest.fromObject(data.page_navigation);
            }
            return message;
        }
        toObject() {
            const data: {
                page_navigation?: ReturnType<typeof dependency_3.faceblur.common.page_navigation.v1.PageNavigationRequest.prototype.toObject>;
            } = {};
            if (this.page_navigation != null) {
                data.page_navigation = this.page_navigation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_page_navigation)
                writer.writeMessage(1, this.page_navigation, () => this.page_navigation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListImagesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListImagesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.page_navigation, () => message.page_navigation = dependency_3.faceblur.common.page_navigation.v1.PageNavigationRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListImagesRequest {
            return ListImagesRequest.deserialize(bytes);
        }
    }
    export class ListImagesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version?: string;
            images?: dependency_2.faceblur.common.image.v1.Image[];
            page_navigation?: dependency_3.faceblur.common.page_navigation.v1.PageNavigationResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("images" in data && data.images != undefined) {
                    this.images = data.images;
                }
                if ("page_navigation" in data && data.page_navigation != undefined) {
                    this.page_navigation = data.page_navigation;
                }
            }
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get images() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.faceblur.common.image.v1.Image, 2) as dependency_2.faceblur.common.image.v1.Image[];
        }
        set images(value: dependency_2.faceblur.common.image.v1.Image[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get page_navigation() {
            return pb_1.Message.getWrapperField(this, dependency_3.faceblur.common.page_navigation.v1.PageNavigationResponse, 3) as dependency_3.faceblur.common.page_navigation.v1.PageNavigationResponse;
        }
        set page_navigation(value: dependency_3.faceblur.common.page_navigation.v1.PageNavigationResponse) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_page_navigation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            version?: string;
            images?: ReturnType<typeof dependency_2.faceblur.common.image.v1.Image.prototype.toObject>[];
            page_navigation?: ReturnType<typeof dependency_3.faceblur.common.page_navigation.v1.PageNavigationResponse.prototype.toObject>;
        }): ListImagesResponse {
            const message = new ListImagesResponse({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.images != null) {
                message.images = data.images.map(item => dependency_2.faceblur.common.image.v1.Image.fromObject(item));
            }
            if (data.page_navigation != null) {
                message.page_navigation = dependency_3.faceblur.common.page_navigation.v1.PageNavigationResponse.fromObject(data.page_navigation);
            }
            return message;
        }
        toObject() {
            const data: {
                version?: string;
                images?: ReturnType<typeof dependency_2.faceblur.common.image.v1.Image.prototype.toObject>[];
                page_navigation?: ReturnType<typeof dependency_3.faceblur.common.page_navigation.v1.PageNavigationResponse.prototype.toObject>;
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.images != null) {
                data.images = this.images.map((item: dependency_2.faceblur.common.image.v1.Image) => item.toObject());
            }
            if (this.page_navigation != null) {
                data.page_navigation = this.page_navigation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version.length)
                writer.writeString(1, this.version);
            if (this.images.length)
                writer.writeRepeatedMessage(2, this.images, (item: dependency_2.faceblur.common.image.v1.Image) => item.serialize(writer));
            if (this.has_page_navigation)
                writer.writeMessage(3, this.page_navigation, () => this.page_navigation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListImagesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListImagesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.images, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.faceblur.common.image.v1.Image.deserialize(reader), dependency_2.faceblur.common.image.v1.Image));
                        break;
                    case 3:
                        reader.readMessage(message.page_navigation, () => message.page_navigation = dependency_3.faceblur.common.page_navigation.v1.PageNavigationResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListImagesResponse {
            return ListImagesResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedImageServiceService {
        static definition = {
            GetUploadURL: {
                path: "/faceblur.image.v1.ImageService/GetUploadURL",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUploadURLRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUploadURLRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUploadURLResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUploadURLResponse.deserialize(new Uint8Array(bytes))
            },
            SubmitImage: {
                path: "/faceblur.image.v1.ImageService/SubmitImage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SubmitImageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SubmitImageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SubmitImageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SubmitImageResponse.deserialize(new Uint8Array(bytes))
            },
            ListImages: {
                path: "/faceblur.image.v1.ImageService/ListImages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListImagesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListImagesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListImagesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListImagesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetUploadURL(call: grpc_1.ServerUnaryCall<GetUploadURLRequest, GetUploadURLResponse>, callback: grpc_1.sendUnaryData<GetUploadURLResponse>): void;
        abstract SubmitImage(call: grpc_1.ServerUnaryCall<SubmitImageRequest, SubmitImageResponse>, callback: grpc_1.sendUnaryData<SubmitImageResponse>): void;
        abstract ListImages(call: grpc_1.ServerUnaryCall<ListImagesRequest, ListImagesResponse>, callback: grpc_1.sendUnaryData<ListImagesResponse>): void;
    }
    export class ImageServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedImageServiceService.definition, "ImageService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetUploadURL: GrpcUnaryServiceInterface<GetUploadURLRequest, GetUploadURLResponse> = (message: GetUploadURLRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUploadURLResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUploadURLResponse>, callback?: grpc_1.requestCallback<GetUploadURLResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUploadURL(message, metadata, options, callback);
        };
        SubmitImage: GrpcUnaryServiceInterface<SubmitImageRequest, SubmitImageResponse> = (message: SubmitImageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SubmitImageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SubmitImageResponse>, callback?: grpc_1.requestCallback<SubmitImageResponse>): grpc_1.ClientUnaryCall => {
            return super.SubmitImage(message, metadata, options, callback);
        };
        ListImages: GrpcUnaryServiceInterface<ListImagesRequest, ListImagesResponse> = (message: ListImagesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListImagesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListImagesResponse>, callback?: grpc_1.requestCallback<ListImagesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListImages(message, metadata, options, callback);
        };
    }
}
