/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: common/page_navigation/v1/page_navigation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace faceblur.common.page_navigation.v1 {
    export class PageNavigationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_number?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_number" in data && data.page_number != undefined) {
                    this.page_number = data.page_number;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_number?: number;
        }): PageNavigationRequest {
            const message = new PageNavigationRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_number != null) {
                message.page_number = data.page_number;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_number?: number;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_number != null) {
                data.page_number = this.page_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_number != 0)
                writer.writeInt32(2, this.page_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PageNavigationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PageNavigationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_number = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PageNavigationRequest {
            return PageNavigationRequest.deserialize(bytes);
        }
    }
    export class PageNavigationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_number?: number;
            page_count?: number;
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_number" in data && data.page_number != undefined) {
                    this.page_number = data.page_number;
                }
                if ("page_count" in data && data.page_count != undefined) {
                    this.page_count = data.page_count;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_number?: number;
            page_count?: number;
            total?: number;
        }): PageNavigationResponse {
            const message = new PageNavigationResponse({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_number != null) {
                message.page_number = data.page_number;
            }
            if (data.page_count != null) {
                message.page_count = data.page_count;
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_number?: number;
                page_count?: number;
                total?: number;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_number != null) {
                data.page_number = this.page_number;
            }
            if (this.page_count != null) {
                data.page_count = this.page_count;
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_number != 0)
                writer.writeInt32(2, this.page_number);
            if (this.page_count != 0)
                writer.writeInt32(3, this.page_count);
            if (this.total != 0)
                writer.writeInt32(4, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PageNavigationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PageNavigationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_number = reader.readInt32();
                        break;
                    case 3:
                        message.page_count = reader.readInt32();
                        break;
                    case 4:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PageNavigationResponse {
            return PageNavigationResponse.deserialize(bytes);
        }
    }
}
